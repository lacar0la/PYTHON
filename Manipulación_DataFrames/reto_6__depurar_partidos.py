# -*- coding: utf-8 -*-
"""Reto 6_ Depurar_partidos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cpznc1VykjXjQjG6vlxWvPeXf_OezsWN

**Reto 6: Depurar partidos de fútbol**

Un hacker alteró los resultados de los partidos de un torneo suramericano de fútbol y ahora la CONMEBOL tiene que hacer algo para corregir la información averiada. 

Escriba una función que reciba la información con problemas en un DataFrame y retornará otro DataFrame con la información corregida.

El DataFrame que se recibe tiene siguientes columnas: 



*   'local': el nombre del equipo local en cada partido.
*   'visitante': el nombre del equipo visitante en cada partido
*   'goles_local': la cantidad de goles que anotó el equipo local en cada partido.
*   'goles_visitante': la cantidad de goles que anotó el equipo visitante en cada partido.
*   'resultado': el resultado del partido, es decir el nombre del equipo ganador o la cadena 'empate' en caso de que hayan anotado la misma cantidad de goles.


Durante el análisis del ataque informático, la CONMEBOL descubrió que el hacker sólo realizó 3 tipos de daños:


1.   Alteró la columna 'resultado' de forma aleatoria.
2.   Introdujo valores nulos en la cantidad de goles, tanto de los equipos locales como de los visitantes.
3. Alteró los nombres de los equipos.

Según lo que decidió la CONMEBOL, la función debe corregir estos errores de la siguiente manera:


*   En la columna 'resultado' debe quedar el resultado correcto del partido (el nombre del equipo ganador o la cadena 'empate').
*   Debe remplazar las cantidades de goles por 0 cuando se encuentren valores nulos.
*   Debe eliminar los partidos en los cuales aparezca que un equipo jugó contra él mismo.

Los valores del DataFrame resultante deben tener el mismo orden en el que se recibieron originalmente.

Su solución debe tener una función de acuerdo con la siguiente especificación: 
*   Nombre de la función: depurar_partidos

Si lo requiere, puede agregar funciones adicionales.
"""

import pandas as pd
import numpy as np

data = np.array([['local', 'visitante', 'goles_local', 'goles_visitante', 'resultado'],
                 ['bogota',"malaga", 3 , 2, "bogota"],
                 ['tolima',"santander", 3 , 3, "santander"],
                 ['malaga',"malaga", 2 , 5, "empate"],
                 ['bogota',"tolima", 4 , 2, "bogota"],
                 ['ibague',"santafe", 4 , 3, "ibague"],
                 ['santafe',"santafe", 5 , 1, "santafe"],
                 ['pasto',"santafe", 1 , 1, "pasto"],
                 ['cali',"america", 4 , 1, "america"],
                 ['pasto',"millonarios", 2 , 3, "pasto"],
                 ['millonarios',"santafe", 1 , 2, "santafe"]])

partidos = pd.DataFrame(data=data[1:,1:],
             index = data[1:,0],
             columns=data[0,1:])

partidos= partidos.reset_index()

partidos.columns =['local','visitante','goles_local','goles_visitante','resultado']

partidos

def depurar_partidos(partidos:pd.DataFrame)->pd.DataFrame:
  partidos = partidos.fillna(0)
  partidos["resultado"]= partidos.apply(lambda val: val["local"] if val["goles_local"] > val["goles_visitante"] else( val["visitante"] if val["goles_local"] < val["goles_visitante"] else "empate"),axis =1 )
  partidos = partidos.drop(partidos[partidos["local"] == partidos["visitante"]].index)
  return(partidos)

depurar_partidos(partidos)