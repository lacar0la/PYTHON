# -*- coding: utf-8 -*-
"""Reto_2_Analizador_lexico.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1--TnvlApz2L1is87vdgZgoqUoPgsbIT4

# Reto 2: Analizador léxico
 Construya una función que reciba como parámetros un texto (cadena de caracteres) y una lista de caracteres permitidos (lista de cadenas de caracteres), y que retorne un diccionario con información sobre las palabras contenidas en el texto. 

La función debe construir un diccionario en el que las llaves son todas las palabras que aparecen en el texto, ignorando si en el texto aparecen en mayúsculas o minúsculas. Sin embargo, las llaves del diccionario deben ser sólo cadenas en minúscula
.

Cada una de las llaves, debe tener asociada una tupla con tres valores de tipo entero: el primero indica la cantidad de veces que aparece la palabra en el texto, el segundo indica la primera posición en la que aparece la palabra, y el tercero indica la última posición en la que aparece. Si la palabra aparece una sola vez en el texto, el segundo y el tercer valor serán iguales.

La lista de caracteres permitidos indica qué caracteres pueden hacer parte de las palabras, cualquier carácter que no haga parte de esta lista debe tratarse como si fuera un espacio o un signo de puntuación.

**Nota: las posiciones hacen referencia a las posiciones en el texto original que la función recibe como parámetro, contadas desde 0.**

Veamos un ejemplo en el que los caracteres permitidos son todos los caracteres del español, incluyendo las vocales acentuadas. Suponga que el texto que se va a analizar es el siguiente: "Muchos años después, frente al pelotón de fusilamiento, el coronel Aureliano Buendía había de recordar aquella tarde remota en que su padre lo llevó a conocer el hielo."

*En el diccionario resultante deben aparecer las siguientes palabras, de las cuales sólo dos se repiten: 'a', 'al', 'aquella', 'aureliano','años', 'buendía', 'conocer', 'coronel', 'de', 'después', 'el', 'en','frente', 'fusilamiento', 'había', 'hielo', 'llevó', 'lo', 'muchos', 'padre', 'pelotón', 'que', 'recordar', 'remota', 'su', 'tarde'.*

 La palabra 'el' aparece dos veces en el texto, la primera a partir de la posición 56 y la segunda a partir de la posición 159. Tenga cuidado, la aparición de la cadena 'el' dentro de la palabra 'hielo' no se tiene en cuenta porque no es una palabra completa.

La otra palabra que se repite en este texto es la palabra 'de', que aparece a partir de las posiciones 39 y 91. Tenga cuidado de no contar la aparición de la sílaba 'de' en la palabra 'después'.

Su solución debe tener una función de acuerdo con la siguiente especificación: 

**Nombre de la función: analizar_texto**

Si lo requiere, puede agregar funciones adicionales.
"""

def analizar_texto(texto: str, caracteres_permitidos: list) -> dict:
    analisis = {}
    texto = texto.lower()
    signos_puntuacion = [",",".",";",":","!","¡","?","¿",'"'," "]
    indices_puntuacion = []
    
    indice_actual = 0
    for letra in texto:
        if letra in signos_puntuacion:
            indices_puntuacion.append(indice_actual)
        if letra not in caracteres_permitidos:            
            texto = texto.replace(letra," ")
        indice_actual += 1
            
    palabras = texto.split()      
    indice_actual = 0
    
    for palabra in palabras:
 
        if palabra in analisis.keys():
            analisis[palabra]=(analisis[palabra][0]+1,analisis[palabra][1],indice_actual)
        else:   
            analisis[palabra]=(1,indice_actual,indice_actual)

        indice_actual += len(palabra)

        if len(indices_puntuacion) > 0:
            for este_indice in indices_puntuacion:
                if indice_actual == indices_puntuacion[0]:
                    indice_actual += 1
                    indices_puntuacion.pop(0)            
    return(analisis)